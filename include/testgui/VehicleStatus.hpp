// Generated by gencpp from file autodrive_msgs/VehicleStatus.msg
// DO NOT EDIT!


#ifndef AUTODRIVE_MSGS_MESSAGE_VEHICLESTATUS_H
#define AUTODRIVE_MSGS_MESSAGE_VEHICLESTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace autodrive_msgs
{
template <class ContainerAllocator>
struct VehicleStatus_
{
  typedef VehicleStatus_<ContainerAllocator> Type;

  VehicleStatus_()
    : header()
    , speed(0.0)
    , wheel_speeds_valid(false)
    , wheel_speeds_fl_valid(false)
    , wheel_speeds_fr_valid(false)
    , wheel_speeds_rl_valid(false)
    , wheel_speeds_rr_valid(false)
    , fl_speed(0.0)
    , fr_speed(0.0)
    , rl_speed(0.0)
    , rr_speed(0.0)
    , wheel_pulses_valid(false)
    , fl_pulse_direction(0)
    , fr_pulse_direction(0)
    , rl_pulse_direction(0)
    , rr_pulse_direction(0)
    , fl_pulse(0)
    , fr_pulse(0)
    , rl_pulse(0)
    , rr_pulse(0)
    , steer_angle_valid(false)
    , steer_angle(0.0)
    , gear_valid(false)
    , gear(0)
    , torque_valid(false)
    , torque(0.0)
    , yaw_rate_valid(false)
    , yaw_rate(0.0)
    , yaw_rate_offset(0.0)
    , left_light_status(false)
    , right_light_status(false)
    , brake_light_status(false)  {
    }
  VehicleStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , speed(0.0)
    , wheel_speeds_valid(false)
    , wheel_speeds_fl_valid(false)
    , wheel_speeds_fr_valid(false)
    , wheel_speeds_rl_valid(false)
    , wheel_speeds_rr_valid(false)
    , fl_speed(0.0)
    , fr_speed(0.0)
    , rl_speed(0.0)
    , rr_speed(0.0)
    , wheel_pulses_valid(false)
    , fl_pulse_direction(0)
    , fr_pulse_direction(0)
    , rl_pulse_direction(0)
    , rr_pulse_direction(0)
    , fl_pulse(0)
    , fr_pulse(0)
    , rl_pulse(0)
    , rr_pulse(0)
    , steer_angle_valid(false)
    , steer_angle(0.0)
    , gear_valid(false)
    , gear(0)
    , torque_valid(false)
    , torque(0.0)
    , yaw_rate_valid(false)
    , yaw_rate(0.0)
    , yaw_rate_offset(0.0)
    , left_light_status(false)
    , right_light_status(false)
    , brake_light_status(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _speed_type;
  _speed_type speed;

   typedef uint8_t _wheel_speeds_valid_type;
  _wheel_speeds_valid_type wheel_speeds_valid;

   typedef uint8_t _wheel_speeds_fl_valid_type;
  _wheel_speeds_fl_valid_type wheel_speeds_fl_valid;

   typedef uint8_t _wheel_speeds_fr_valid_type;
  _wheel_speeds_fr_valid_type wheel_speeds_fr_valid;

   typedef uint8_t _wheel_speeds_rl_valid_type;
  _wheel_speeds_rl_valid_type wheel_speeds_rl_valid;

   typedef uint8_t _wheel_speeds_rr_valid_type;
  _wheel_speeds_rr_valid_type wheel_speeds_rr_valid;

   typedef float _fl_speed_type;
  _fl_speed_type fl_speed;

   typedef float _fr_speed_type;
  _fr_speed_type fr_speed;

   typedef float _rl_speed_type;
  _rl_speed_type rl_speed;

   typedef float _rr_speed_type;
  _rr_speed_type rr_speed;

   typedef uint8_t _wheel_pulses_valid_type;
  _wheel_pulses_valid_type wheel_pulses_valid;

   typedef int32_t _fl_pulse_direction_type;
  _fl_pulse_direction_type fl_pulse_direction;

   typedef int32_t _fr_pulse_direction_type;
  _fr_pulse_direction_type fr_pulse_direction;

   typedef int32_t _rl_pulse_direction_type;
  _rl_pulse_direction_type rl_pulse_direction;

   typedef int32_t _rr_pulse_direction_type;
  _rr_pulse_direction_type rr_pulse_direction;

   typedef int32_t _fl_pulse_type;
  _fl_pulse_type fl_pulse;

   typedef int32_t _fr_pulse_type;
  _fr_pulse_type fr_pulse;

   typedef int32_t _rl_pulse_type;
  _rl_pulse_type rl_pulse;

   typedef int32_t _rr_pulse_type;
  _rr_pulse_type rr_pulse;

   typedef uint8_t _steer_angle_valid_type;
  _steer_angle_valid_type steer_angle_valid;

   typedef float _steer_angle_type;
  _steer_angle_type steer_angle;

   typedef uint8_t _gear_valid_type;
  _gear_valid_type gear_valid;

   typedef int32_t _gear_type;
  _gear_type gear;

   typedef uint8_t _torque_valid_type;
  _torque_valid_type torque_valid;

   typedef float _torque_type;
  _torque_type torque;

   typedef uint8_t _yaw_rate_valid_type;
  _yaw_rate_valid_type yaw_rate_valid;

   typedef float _yaw_rate_type;
  _yaw_rate_type yaw_rate;

   typedef float _yaw_rate_offset_type;
  _yaw_rate_offset_type yaw_rate_offset;

   typedef uint8_t _left_light_status_type;
  _left_light_status_type left_light_status;

   typedef uint8_t _right_light_status_type;
  _right_light_status_type right_light_status;

   typedef uint8_t _brake_light_status_type;
  _brake_light_status_type brake_light_status;





  typedef boost::shared_ptr< ::autodrive_msgs::VehicleStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autodrive_msgs::VehicleStatus_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleStatus_

typedef ::autodrive_msgs::VehicleStatus_<std::allocator<void> > VehicleStatus;

typedef boost::shared_ptr< ::autodrive_msgs::VehicleStatus > VehicleStatusPtr;
typedef boost::shared_ptr< ::autodrive_msgs::VehicleStatus const> VehicleStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autodrive_msgs::VehicleStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autodrive_msgs::VehicleStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace autodrive_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'autodrive_msgs': ['/home/lyc/catkin_ws/src/common/src/autodrive_msgs/msg/extensions', '/home/lyc/catkin_ws/src/common/src/autodrive_msgs/msg/ext_msgs', '/home/lyc/catkin_ws/src/common/src/autodrive_msgs/msg', '/home/lyc/catkin_ws/src/common/src/autodrive_msgs/msg/map_msgs', '/home/lyc/catkin_ws/src/common/src/autodrive_msgs/msg/planning_msgs', '/home/lyc/catkin_ws/src/common/src/autodrive_msgs/msg/local_fusion']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::autodrive_msgs::VehicleStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autodrive_msgs::VehicleStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autodrive_msgs::VehicleStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autodrive_msgs::VehicleStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autodrive_msgs::VehicleStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autodrive_msgs::VehicleStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autodrive_msgs::VehicleStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e4cb71e1d120f7734e755c52b2a3d08c";
  }

  static const char* value(const ::autodrive_msgs::VehicleStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe4cb71e1d120f773ULL;
  static const uint64_t static_value2 = 0x4e755c52b2a3d08cULL;
};

template<class ContainerAllocator>
struct DataType< ::autodrive_msgs::VehicleStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autodrive_msgs/VehicleStatus";
  }

  static const char* value(const ::autodrive_msgs::VehicleStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autodrive_msgs::VehicleStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
float32 speed\n\
bool wheel_speeds_valid\n\
bool wheel_speeds_fl_valid\n\
bool wheel_speeds_fr_valid\n\
bool wheel_speeds_rl_valid\n\
bool wheel_speeds_rr_valid\n\
float32 fl_speed\n\
float32 fr_speed\n\
float32 rl_speed\n\
float32 rr_speed\n\
bool wheel_pulses_valid\n\
int32 fl_pulse_direction\n\
int32 fr_pulse_direction\n\
int32 rl_pulse_direction\n\
int32 rr_pulse_direction\n\
int32 fl_pulse\n\
int32 fr_pulse\n\
int32 rl_pulse\n\
int32 rr_pulse\n\
bool steer_angle_valid\n\
float32 steer_angle      # in degrees\n\
bool gear_valid\n\
int32 gear               # 1->P, 2->R, 3->N, 4->D\n\
bool torque_valid\n\
float32 torque\n\
bool yaw_rate_valid\n\
float32 yaw_rate\n\
float32 yaw_rate_offset\n\
bool left_light_status\n\
bool right_light_status\n\
bool brake_light_status \n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::autodrive_msgs::VehicleStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autodrive_msgs::VehicleStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.speed);
      stream.next(m.wheel_speeds_valid);
      stream.next(m.wheel_speeds_fl_valid);
      stream.next(m.wheel_speeds_fr_valid);
      stream.next(m.wheel_speeds_rl_valid);
      stream.next(m.wheel_speeds_rr_valid);
      stream.next(m.fl_speed);
      stream.next(m.fr_speed);
      stream.next(m.rl_speed);
      stream.next(m.rr_speed);
      stream.next(m.wheel_pulses_valid);
      stream.next(m.fl_pulse_direction);
      stream.next(m.fr_pulse_direction);
      stream.next(m.rl_pulse_direction);
      stream.next(m.rr_pulse_direction);
      stream.next(m.fl_pulse);
      stream.next(m.fr_pulse);
      stream.next(m.rl_pulse);
      stream.next(m.rr_pulse);
      stream.next(m.steer_angle_valid);
      stream.next(m.steer_angle);
      stream.next(m.gear_valid);
      stream.next(m.gear);
      stream.next(m.torque_valid);
      stream.next(m.torque);
      stream.next(m.yaw_rate_valid);
      stream.next(m.yaw_rate);
      stream.next(m.yaw_rate_offset);
      stream.next(m.left_light_status);
      stream.next(m.right_light_status);
      stream.next(m.brake_light_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autodrive_msgs::VehicleStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autodrive_msgs::VehicleStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "wheel_speeds_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wheel_speeds_valid);
    s << indent << "wheel_speeds_fl_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wheel_speeds_fl_valid);
    s << indent << "wheel_speeds_fr_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wheel_speeds_fr_valid);
    s << indent << "wheel_speeds_rl_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wheel_speeds_rl_valid);
    s << indent << "wheel_speeds_rr_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wheel_speeds_rr_valid);
    s << indent << "fl_speed: ";
    Printer<float>::stream(s, indent + "  ", v.fl_speed);
    s << indent << "fr_speed: ";
    Printer<float>::stream(s, indent + "  ", v.fr_speed);
    s << indent << "rl_speed: ";
    Printer<float>::stream(s, indent + "  ", v.rl_speed);
    s << indent << "rr_speed: ";
    Printer<float>::stream(s, indent + "  ", v.rr_speed);
    s << indent << "wheel_pulses_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wheel_pulses_valid);
    s << indent << "fl_pulse_direction: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fl_pulse_direction);
    s << indent << "fr_pulse_direction: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fr_pulse_direction);
    s << indent << "rl_pulse_direction: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rl_pulse_direction);
    s << indent << "rr_pulse_direction: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rr_pulse_direction);
    s << indent << "fl_pulse: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fl_pulse);
    s << indent << "fr_pulse: ";
    Printer<int32_t>::stream(s, indent + "  ", v.fr_pulse);
    s << indent << "rl_pulse: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rl_pulse);
    s << indent << "rr_pulse: ";
    Printer<int32_t>::stream(s, indent + "  ", v.rr_pulse);
    s << indent << "steer_angle_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.steer_angle_valid);
    s << indent << "steer_angle: ";
    Printer<float>::stream(s, indent + "  ", v.steer_angle);
    s << indent << "gear_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gear_valid);
    s << indent << "gear: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gear);
    s << indent << "torque_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.torque_valid);
    s << indent << "torque: ";
    Printer<float>::stream(s, indent + "  ", v.torque);
    s << indent << "yaw_rate_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.yaw_rate_valid);
    s << indent << "yaw_rate: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_rate);
    s << indent << "yaw_rate_offset: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_rate_offset);
    s << indent << "left_light_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_light_status);
    s << indent << "right_light_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_light_status);
    s << indent << "brake_light_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brake_light_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTODRIVE_MSGS_MESSAGE_VEHICLESTATUS_H
